generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  fullName      String
  email         String         @unique
  password      String
  phone         String         @unique
  role          Role
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  lastLogin     DateTime?
  appointments  Appointment[]  @relation("DoctorAppointments")
  clinicalNotes ClinicalNote[] @relation("ProviderClinicalNotes")
  refreshTokens RefreshToken[]
  auditLogs     AuditLog[]     @relation("UserAuditLogs")

  @@index([email])
}

model PreRegistration {
  id          String                @id @default(uuid())
  firstName   String
  lastName    String
  dateOfBirth DateTime
  phone       String
  email       String
  address     String?
  preRegCode  String                @unique
  status      PreRegistrationStatus @default(PENDING)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  // Optional one-to-one relation to Patient
  patient Patient? @relation("PreRegPatient")
}

model Patient {
  id               String        @id @default(uuid())
  firstName        String
  lastName         String
  email            String        @unique
  phone            String
  address          String?
  dateOfBirth      DateTime
  gender           Gender?
  emergencyContact Json?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  status           PatientStatus @default(ACTIVE)
  deletedAt        DateTime?

  appointments   Appointment[]
  clinicalNotes  ClinicalNote[]
  medicalRecords MedicalRecord[]

  // Optional back relation to PreRegistration
  preRegistration   PreRegistration? @relation("PreRegPatient", fields: [preRegistrationId], references: [id])
  preRegistrationId String?          @unique
}

model MedicalRecord {
  id          String           @id @default(uuid())
  type        RecordType
  name        String
  notes       String?
  diagnosedAt DateTime?
  resolvedAt  DateTime?
  severity    AllergySeverity?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])
}

model Appointment {
  id            String            @id @default(uuid())
  type          String
  notes         String?
  status        AppointmentStatus @default(PENDING)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  appointmentAt DateTime
  patientId     String
  doctorId      String
  doctor        User              @relation("DoctorAppointments", fields: [doctorId], references: [id])
  patient       Patient           @relation(fields: [patientId], references: [id])
}

model ClinicalNote {
  id          String   @id @default(uuid())
  diagnosis   String
  treatment   String
  vitals      Json?
  medications String?
  followUp    String?
  additional  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  patientId   String
  providerId  String?
  patient     Patient  @relation(fields: [patientId], references: [id])
  provider    User?    @relation("ProviderClinicalNotes", fields: [providerId], references: [id])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  revoked   Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String?
  action     String
  resource   String
  resourceId String?
  changes    Json?
  createdAt  DateTime @default(now())

  user User? @relation("UserAuditLogs", fields: [userId], references: [id])
}

model AuditTrail {
  id         String   @id @default(cuid())
  action     String   // CREATE, UPDATE, DELETE
  model      String
  recordId   String
  oldData    Json?
  newData    Json?
  createdBy  String?
  createdAt  DateTime @default(now())
}


enum Gender {
  MALE
  FEMALE
  OTHER
}

enum PatientStatus {
  ACTIVE
  INACTIVE
}

enum Role {
  ADMIN
  DOCTOR
  FRONTDESK
  NURSE
  PATIENT
}

enum AppointmentStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
}

enum RecordType {
  HISTORY
  ALLERGY
}

enum AllergySeverity {
  MILD
  MODERATE
  SEVERE
}

enum PreRegistrationStatus {
  PENDING
  COMPLETED
}
