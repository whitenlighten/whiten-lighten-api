import {
Â  Injectable,
Â  Logger,
Â  InternalServerErrorException,
} from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import * as nodemailer from 'nodemailer';

// Interface must be defined outside the class
interface MailData {
Â  to: string;
Â  subject: string;
Â  text: string;
Â  html?: string;
}

@Injectable()
export class MailService {
Â  private readonly logger = new Logger(MailService.name);
Â  private transporter: nodemailer.Transporter;

Â  constructor(private readonly config: ConfigService) {
Â  Â  const host = this.config.get<string>('SMTP_HOST') || 'smtp.gmail.com';
Â  Â  const port = Number(this.config.get<string>('SMTP_PORT') || 465);
Â  Â  const secure = this.config.get<string>('SMTP_SECURE') === 'true' || port === 465;

Â  Â  this.transporter = nodemailer.createTransport({
Â  Â  Â  host,
Â  Â  Â  port,
Â  Â  Â  secure,
Â  Â  Â  auth: {
Â  Â  Â  Â  user: this.config.get<string>('SMTP_USER'),
Â  Â  Â  Â  pass: this.config.get<string>('SMTP_PASS'),
Â  Â  Â  },
Â  Â  Â  tls: {
Â  Â  Â  Â  // for dev, if needed; in prod prefer valid certs
Â  Â  Â  Â  rejectUnauthorized: this.config.get<string>('SMTP_REJECT_UNAUTHORIZED') !== 'false',
Â  Â  Â  },
Â  Â  });

Â  Â  this.transporter.verify((err, success) => {
Â  Â  Â  if (err) {
Â  Â  Â  Â  this.logger.error('SMTP verification failed', err);
Â  Â  Â  } else {
Â  Â  Â  Â  this.logger.log('SMTP transporter verified; ready to send emails');
Â  Â  Â  }
Â  Â  Â  if (success) {
Â  Â  Â  Â  this.logger.log('SMTP transporter verification succeeded');
Â  Â  Â  }
Â  Â  });
Â  }

Â  private formatFrom(): string {
Â  Â  return this.config.get<string>('EMAIL_FROM') || this.config.get<string>('SMTP_USER') || '';
Â  }

Â  // This is the generic send method, it accepts individual arguments
Â  async sendMail(to: string, subject: string, text: string, html?: string) {
Â  Â  try {
Â  Â  Â  const result = await this.transporter.sendMail({
Â  Â  Â  Â  from: this.formatFrom(),
Â  Â  Â  Â  to,
Â  Â  Â  Â  subject,
Â  Â  Â  Â  text,
Â  Â  Â  Â  html: html || text,
Â  Â  Â  });

Â  Â  Â  this.logger.log(`Mail sent to ${to} (messageId=${(result as any)?.messageId})`);
Â  Â  Â  return result;
Â  Â  } catch (err) {
Â  Â  Â  this.logger.error(`Failed to send email to ${to}`, (err as any).stack || err);
Â  Â  Â  // Throw for flows that expect error; caller can catch and decide
Â  Â  Â  throw new InternalServerErrorException('Failed to send email');
Â  Â  }
Â  }

Â  // --- EXISTING METHODS (UNCHANGED) ---
Â  async sendPasswordResetEmail(to: string, resetUrl: string) {
Â  Â  const subject = 'Password reset request';
Â  Â  const text = `Reset your password using this link: ${resetUrl}`;
Â  Â  const html = `
Â  Â  Â  <p>You requested a password reset.</p>
Â  Â  Â  <p><a href="${resetUrl}">Click here to reset your password</a> (link expires soon).</p>
Â  Â  Â  <p>If you didn't request this, ignore this email.</p>
Â  Â  `;
Â  Â  return this.sendMail(to, subject, text, html);
Â  }

Â  async sendWelcomeEmail(
Â  Â  to: string,
Â  Â  name: string | undefined,
Â  Â  role: string,
Â  Â  maybePassword?: string,
Â  ) {
Â  Â  // ... implementation unchanged
Â  Â  const subject = `ðŸŽ‰ Welcome to Whiten Lighten Clinic â€” ${role} ðŸŽ‰`;
Â  Â  const text = `
Hi ${name ?? ''},
Your account has been created successfully.
Username: ${to}
${maybePassword ? `Password: ${maybePassword}` : ''}
Please log in and change your password immediately.
Â  Â  `;
Â  Â  const html = `
Â  Â  Â  <div style="font-family: 'Segoe UI', Arial, sans-serif; background: #f9f9fc; padding: 32px;">
Â  Â  Â  Â  <div style="max-width: 480px; margin: auto; background: #fff; border-radius: 12px; box-shadow: 0 2px 8px #e0e0e0; padding: 32px;">
Â  Â  Â  Â  Â  <div style="text-align: center;">
Â  Â  Â  Â  Â  Â  <img src="https://img.icons8.com/color/96/000000/tooth.png" alt="Clinic Logo" style="margin-bottom: 16px;" />
Â  Â  Â  Â  Â  Â  <h2 style="color: #2d6cdf; margin-bottom: 8px;">Welcome${name ? `, ${name}` : ''}!</h2>
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  <p style="font-size: 1.1em; color: #444;">
Â  Â  Â  Â  Â  Â  Â  We're excited to have you join <strong>CelebDent Clinic</strong> as a 
Â  Â  Â  Â  Â  Â  Â  <span style="color: #2d6cdf;">${role}</span>.
Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  <div style="margin: 24px 0; text-align: center;">
Â  Â  Â  Â  Â  Â  <p style="color: #222; font-weight: 500;">Your login credentials:</p>
Â  Â  Â  Â  Â  Â  <div style="background: #f1f6ff; border-radius: 6px; padding: 12px; font-size: 1.1em; color: #2d6cdf; text-align: left; display: inline-block;">
Â  Â  Â  Â  Â  Â  Â  <p><strong>Username:</strong> ${to}</p>
Â  Â  Â  Â  Â  Â  Â  ${
Â  Â  Â  Â  Â  Â  Â  Â  maybePassword
Â  Â  Â  Â  Â  Â  Â  Â  Â  ? `<p><strong>Password:</strong> ${maybePassword}</p>`
Â  Â  Â  Â  Â  Â  Â  Â  Â  : ''
Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <p style="font-size: 0.95em; color: #888;">
Â  Â  Â  Â  Â  Â  Â  Please log in and change your password immediately for security.
Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  <hr style="margin: 32px 0; border: none; border-top: 1px solid #eee;" />
Â  Â  Â  Â  Â  <p style="color: #666; font-size: 0.98em; text-align: center;">
Â  Â  Â  Â  Â  Â  If you have any questions, reply to this email or contact our support team.<br/>
Â  Â  Â  Â  Â  Â  <span style="color: #2d6cdf;">Welcome aboard!</span>
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  `;
Â  Â  return this.sendMail(to, subject, text, html);
Â  }


Â 

Â  // --- UPDATED METHOD SIGNATURE for consistency ---
Â  async sendAppointmentNotificationToPatient(
Â  Â  to: string,
Â  Â  patientName: string,
Â  Â  appointmentDateTime: string, // Changed from appointmentDate (string) to appointmentDateTime (string) for clarity
Â  Â  doctorName?: string,
Â  Â  patientId?: string, // Added patientId/misc. param just in case (as it was passed in the create call) but not used in the email body
Â  ) {
Â  Â  const subject = 'ðŸ¦· Appointment Confirmation';
Â  Â  const text = `Dear ${patientName}, your appointment has been booked for ${appointmentDateTime}${doctorName ? ` with ${doctorName}` : ''}.`;
Â  Â  const html = `
Â  Â  Â  <h2>Appointment Confirmation</h2>
Â  Â  Â  <p>Dear ${patientName},</p>
Â  Â  Â  <p>Your appointment has been successfully booked for <strong>${appointmentDateTime}</strong>${doctorName ? ` with <strong>Dr. ${doctorName}</strong>` : ''}.</p>
Â  Â  Â  <p>We look forward to seeing you!</p>
Â  Â  `;
Â  Â  return this.sendMail(to, subject, text, html);
Â  }

Â  // âœ… Front desk (and super admin) appointment notification
Â  async sendAppointmentNotificationToFrontdesk(
Â  Â  to: string,
Â  Â  subject: string, // Changed to receive a custom subject
Â  Â  text: string, // Changed to receive a custom text/message
Â  Â  html?: string,
Â  ) {
Â  Â  // The AppointmentsService is now passing the subject and message directly, 
Â  Â  // so we simplify this method to use the generic one.
Â  Â  return this.sendMail(to, subject, text, html);
Â  }


Â  async sendAppointmentNotification(to: string, subject: string, text: string, html?: string) {
Â  Â  return this.sendMail(to, subject, text, html);
Â  }
Â  

Â  
Â  // --- NEW METHOD: Doctor Appointment Confirmation ---
Â  async sendConfirmationToDoctor(
Â  Â  to: string,
Â  Â  doctorName: string | undefined,
Â  Â  patientName: string,
Â  Â  appointmentDateTime: string,
Â  Â  service: string,
Â  ) {
Â  Â  const subject = 'âœ… APPOINTMENT CONFIRMED: Ready for Patient Visit';
Â  Â  const text = `Dear Dr. ${doctorName ?? ''}, The appointment with patient ${patientName} on ${appointmentDateTime} for service ${service} has been CONFIRMED.`;
Â  Â  const html = `
Â  Â  Â  <h3>Appointment Confirmed</h3>
Â  Â  Â  <p>Dear Dr. ${doctorName ?? ''},</p>
Â  Â  Â  <p>The appointment with patient <strong>${patientName}</strong> on <strong>${appointmentDateTime}</strong>Â 
Â  Â  Â  for service **${service}** has been **CONFIRMED** and finalized.</p>
Â  Â  Â  <p>Please review the patient's record on your dashboard before the visit.</p>
Â  Â  `;
Â  Â  return this.sendMail(to, subject, text, html);
Â  }

}